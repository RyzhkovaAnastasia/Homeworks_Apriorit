/*
Deployment script for Database

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Database"
:setvar DefaultFilePrefix "Database"
:setvar DefaultDataPath "C:\Users\sherl\AppData\Local\Microsoft\VisualStudio\SSDT\Database"
:setvar DefaultLogPath "C:\Users\sherl\AppData\Local\Microsoft\VisualStudio\SSDT\Database"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

--Реализовать заполнение всех таблиц базовыми значениями(2 товара, 2
--производителя, 2 склада) при выполнении паблиша SSDT проекта на
--базу данных. Данные не должны дублироваться при повторном
--паблише

IF NOT EXISTS (SELECT TOP (1) Product.Id FROM Product)
BEGIN 
  DECLARE @products ProductTableType;
  INSERT INTO @products (ProductName) VALUES 
  ('Dior Sauvage'),
  ('Dior Miss Dior Blooming Bouquet');
  exec CreateProducerWithProducts 
  @producerName = 'Dior', @productTable = @products;
  DELETE FROM @products;

  INSERT INTO @products (ProductName) VALUES 
  ('Chanel Chance Eau Tendre'),
  ('Chanel Coco Mademoiselle');
  exec CreateProducerWithProducts
  @producerName = 'Chanel', @productTable = @products;
  DELETE FROM @products;
END
  

IF NOT EXISTS (SELECT TOP (1) Storage.Id FROM Storage)
BEGIN
  INSERT INTO Storage (StorageName) VALUES 
  ('MakeUpUA'), 
  ('Parfums');
END

IF NOT EXISTS (SELECT TOP (1) Id FROM Product_On_Storage)
	BEGIN
	  exec AddProductToStorage @productId = 1, @storageId = 1, @productCount = 109; 
	  exec AddProductToStorage @productId = 2, @storageId = 1, @productCount = 98; 
	  exec AddProductToStorage @productId = 3, @storageId = 1, @productCount = 105; 
	  exec AddProductToStorage @productId = 4, @storageId = 1, @productCount = 45; 
	  exec AddProductToStorage @productId = 1, @storageId = 2, @productCount = 152; 
	  exec AddProductToStorage @productId = 2, @storageId = 2, @productCount = 34; 
	  exec AddProductToStorage @productId = 3, @storageId = 2, @productCount = 149;
	END
GO

GO
PRINT N'Update complete.';


GO
